#[derive(Clone, Copy, PartialEq, PartialOrd, Ord, Eq, Hash, Debug, Default)]
#[non_exhaustive]
#[repr(u16)]
pub enum LightingAndIlluminationUsage {
    #[default]
    Undefined,
    LampArray,
    LampArrayAttributesReport,
    LampCount,
    BoundingBoxWidthInMicrometers,
    BoundingBoxHeightInMicrometers,
    BoundingBoxDepthInMicrometers,
    LampArrayKind,
    MinUpdateIntervalInMicroseconds,
    Reserved09_1F(u16),
    LampAttributesRequestReport = 32,
    LampId,
    LampAttributesResponseReport,
    PositionXInMicrometers,
    PositionYInMicrometers,
    PositionZInMicrometers,
    LampPurposes,
    UpdateLatencyInMicroseconds,
    RedLevelCount,
    GreenLevelCount,
    BlueLevelCount,
    IntensityLevelCount,
    IsProgrammable,
    InputBinding,
    Reserved2E_4F(u16),
    LampMultiUpdateReport = 80,
    RedUpdateChannel,
    GreenUpdateChannel,
    BlueUpdateChannel,
    IntensityUpdateChannel,
    LampUpdateFlags,
    Reserved56_5F(u16),
    LampRangeUpdateReport = 96,
    LampIdStart,
    LampIdEnd,
    Reserved63_6F(u16),
    LampArrayControlReport = 112,
    AutonomousMode,
    Reserved72_FFFF(u16),
}
impl<T> From<T> for LightingAndIlluminationUsage
where
    T: TryInto<u16>,
{
    fn from(value: T) -> Self {
        let value = value.try_into().unwrap_or(0);
        match value {
            0 => Self::Undefined,
            1 => Self::LampArray,
            2 => Self::LampArrayAttributesReport,
            3 => Self::LampCount,
            4 => Self::BoundingBoxWidthInMicrometers,
            5 => Self::BoundingBoxHeightInMicrometers,
            6 => Self::BoundingBoxDepthInMicrometers,
            7 => Self::LampArrayKind,
            8 => Self::MinUpdateIntervalInMicroseconds,
            9..32 => Self::Reserved09_1F(value),
            32 => Self::LampAttributesRequestReport,
            33 => Self::LampId,
            34 => Self::LampAttributesResponseReport,
            35 => Self::PositionXInMicrometers,
            36 => Self::PositionYInMicrometers,
            37 => Self::PositionZInMicrometers,
            38 => Self::LampPurposes,
            39 => Self::UpdateLatencyInMicroseconds,
            40 => Self::RedLevelCount,
            41 => Self::GreenLevelCount,
            42 => Self::BlueLevelCount,
            43 => Self::IntensityLevelCount,
            44 => Self::IsProgrammable,
            45 => Self::InputBinding,
            46..80 => Self::Reserved2E_4F(value),
            80 => Self::LampMultiUpdateReport,
            81 => Self::RedUpdateChannel,
            82 => Self::GreenUpdateChannel,
            83 => Self::BlueUpdateChannel,
            84 => Self::IntensityUpdateChannel,
            85 => Self::LampUpdateFlags,
            86..96 => Self::Reserved56_5F(value),
            96 => Self::LampRangeUpdateReport,
            97 => Self::LampIdStart,
            98 => Self::LampIdEnd,
            99..112 => Self::Reserved63_6F(value),
            112 => Self::LampArrayControlReport,
            113 => Self::AutonomousMode,
            114..=65535 => Self::Reserved72_FFFF(value),
        }
    }
}
